# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Nuno Mourinho
# This file is distributed under the same license as the ForensicVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ForensicVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-07-07 07:26+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/apikeys.rst:2
msgid "apikeys package"
msgstr ""

#: ../../source/apikeys.rst:5
msgid "Subpackages"
msgstr ""

#: ../../source/apikeys.rst:13
msgid "Submodules"
msgstr ""

#: ../../source/apikeys.rst:16
msgid "apikeys.admin module"
msgstr ""

#: ../../../apikeys/admin.py:docstring of apikeys.admin.ApiKeyAdmin:1
msgid "Bases: :py:class:`~django.contrib.admin.options.ModelAdmin`"
msgstr ""

#: ../../../apikeys/admin.py:docstring of apikeys.admin.ApiKeyAdmin:1
msgid "ModelAdmin for the ApiKey model."
msgstr ""

#: ../../../apikeys/admin.py:docstring of apikeys.admin.ApiKeyAdmin:3
msgid "This ModelAdmin provides customizations for the admin interface for the ApiKey model. It specifies the form to use, the list display fields, and additional methods."
msgstr ""

#: ../../../apikeys/admin.py:docstring of apikeys.admin.ApiKeyAdmin.get_queryset:1
msgid "Returns the queryset of ApiKey objects."
msgstr ""

#: ../../../apikeys/admin.py:docstring of apikeys.admin.ApiKeyAdmin.get_queryset:3
msgid "This method is used to filter the queryset of ApiKey objects based on the user's privileges. If the user is a superuser, all objects are returned. Otherwise, only the objects belonging to the user are returned."
msgstr ""

#: ../../../apikeys/admin.py:docstring of apikeys.admin.ApiKeyAdmin.masked_key:1
msgid "Returns the masked version of the API key."
msgstr ""

#: ../../../apikeys/admin.py:docstring of apikeys.admin.ApiKeyAdmin.masked_key:3
msgid "This method takes an ApiKey object and returns a masked version of the API key. The masked version replaces most characters with a mask character, except for the last few characters which are displayed as is."
msgstr ""

#: ../../../apikeys/admin.py:docstring of apikeys.admin.ApiKeyAdmin.save_model:1
msgid "Saves the ApiKey object."
msgstr ""

#: ../../../apikeys/admin.py:docstring of apikeys.admin.ApiKeyAdmin.save_model:3
msgid "This method is called when saving an ApiKey object through the admin interface. It sets the user attribute of the object to the current user and then saves the object. Additionally, it displays a success message with the generated API key."
msgstr ""

#: ../../../apikeys/admin.py:docstring of apikeys.admin.ApiKeyForm:1
msgid "Bases: :py:class:`~django.forms.models.ModelForm`"
msgstr ""

#: ../../../apikeys/admin.py:docstring of apikeys.admin.ApiKeyForm:1
msgid "A form for the ApiKey model."
msgstr ""

#: ../../../apikeys/admin.py:docstring of apikeys.admin.ApiKeyForm:3
msgid "This form specifies the model, fields, and any exclusions for the ApiKey model. It also defines a custom widget for the 'key' field to display a masked input."
msgstr ""

#: ../../../apikeys/admin.py:docstring of apikeys.admin.ApiKeyForm.Meta:1
#: ../../../apikeys/serializers.py:docstring of apikeys.serializers.ApiKeySerializer.Meta:1
msgid "Bases: :py:class:`object`"
msgstr ""

#: ../../../apikeys/admin.py:docstring of apikeys.admin.ApiKeyForm.media:1
msgid "Return all media required to render the widgets on this form."
msgstr ""

#: ../../../apikeys/admin.py:docstring of apikeys.admin.MaskedInput:1
msgid "Bases: :py:class:`~django.forms.widgets.TextInput`"
msgstr ""

#: ../../../apikeys/admin.py:docstring of apikeys.admin.MaskedInput:1
msgid "A custom form input widget that masks the input value."
msgstr ""

#: ../../../apikeys/admin.py:docstring of apikeys.admin.MaskedInput:3
msgid "This widget replaces the actual value with a masked version for display purposes. The masked value consists of a configurable mask character repeated for the length of the value minus a specified mask length. The remaining characters at the end of the value are displayed as is."
msgstr ""

#: ../../../apikeys/admin.py:docstring of apikeys.admin.MaskedInput.format_value:1
msgid "Formats the input value with masking."
msgstr ""

#: ../../../apikeys/admin.py:docstring of apikeys.admin.MaskedInput.format_value:4
#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeMemorySizeView.post:6
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckVMExistsView.get:6
#: ../../../apikeys/views.py:docstring of apikeys.views.CreateSnapshotView.post:5
#: ../../../apikeys/views.py:docstring of apikeys.views.CreateSshKeysView.post:4
#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteSnapshotView.post:6
#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteVMView.post:6
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadScreenshotsView.get:10
#: ../../../apikeys/views.py:docstring of apikeys.views.ForensicImageVMStatus.get:5
#: ../../../apikeys/views.py:docstring of apikeys.views.GetAvailableMemoryView.get:4
#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySizeView.get:5
#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySnapshotView.get:9
#: ../../../apikeys/views.py:docstring of apikeys.views.MountFolderView.post:6
#: ../../../apikeys/views.py:docstring of apikeys.views.ProtectedView.get:4
#: ../../../apikeys/views.py:docstring of apikeys.views.ResetVMView.get_user_or_key_error:8
#: ../../../apikeys/views.py:docstring of apikeys.views.ResetVMView.post:6
#: ../../../apikeys/views.py:docstring of apikeys.views.RollbackSnapshotView.post:6
#: ../../../apikeys/views.py:docstring of apikeys.views.RunScriptView.post:4
#: ../../../apikeys/views.py:docstring of apikeys.views.ScreenshotVMView.get_user_or_key_error:8
#: ../../../apikeys/views.py:docstring of apikeys.views.ScreenshotVMView.post:10
#: ../../../apikeys/views.py:docstring of apikeys.views.ShutdownVMView.get_user_or_key_error:8
#: ../../../apikeys/views.py:docstring of apikeys.views.ShutdownVMView.post:6
#: ../../../apikeys/views.py:docstring of apikeys.views.SnapshotListView.get:5
#: ../../../apikeys/views.py:docstring of apikeys.views.StartVMView.post:5
#: ../../../apikeys/views.py:docstring of apikeys.views.StopVMView.post:5
#: ../../../apikeys/views.py:docstring of apikeys.views.create_and_format_qcow2:11
#: ../../../apikeys/views.py:docstring of apikeys.views.create_snapshot:7
#: ../../../apikeys/views.py:docstring of apikeys.views.delete_snapshot:8
#: ../../../apikeys/views.py:docstring of apikeys.views.find_available_port:4
#: ../../../apikeys/views.py:docstring of apikeys.views.get_snapshots:7
#: ../../../apikeys/views.py:docstring of apikeys.views.rollback_snapshot:8
#: ../../../apikeys/views.py:docstring of apikeys.views.screendump:9
#: ../../../apikeys/views.py:docstring of apikeys.views.system_reset:5
#: ../../../apikeys/views.py:docstring of apikeys.views.system_shutdown:5
msgid "Args:"
msgstr ""

#: ../../../apikeys/admin.py:docstring of apikeys.admin.MaskedInput.format_value:4
msgid "value (str): The input value to be formatted."
msgstr ""

#: ../../../apikeys/admin.py:docstring of apikeys.admin.MaskedInput.format_value:6
#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeMemorySizeView.post:8
#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeVMDateTimeView.post:17
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView.get:16
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView.get_user_or_key_error:15
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckTapInterfaceView.post:16
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView.get:13
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView.get_user_or_key_error:16
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckVMExistsView.get:8
#: ../../../apikeys/views.py:docstring of apikeys.views.CreateSnapshotView.post:7
#: ../../../apikeys/views.py:docstring of apikeys.views.CreateSshKeysView.post:6
#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteSnapshotView.post:8
#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteVMView.post:8
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadNetworkPcapView.get:18
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadScreenshotsView.get:13
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get:17
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get_user_or_key_error:16
#: ../../../apikeys/views.py:docstring of apikeys.views.ForensicImageVMStatus.get:7
#: ../../../apikeys/views.py:docstring of apikeys.views.GetAvailableMemoryView.get:6
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView.get:15
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView.get_user_or_key_error:16
#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySizeView.get:7
#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySnapshotView.get:12
#: ../../../apikeys/views.py:docstring of apikeys.views.MountFolderView.post:8
#: ../../../apikeys/views.py:docstring of apikeys.views.ProtectedView.get:6
#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.get_user_or_key_error:15
#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.post:17
#: ../../../apikeys/views.py:docstring of apikeys.views.RemoveVMDateTimeView.post:16
#: ../../../apikeys/views.py:docstring of apikeys.views.ResetVMView.get_user_or_key_error:14
#: ../../../apikeys/views.py:docstring of apikeys.views.ResetVMView.post:8
#: ../../../apikeys/views.py:docstring of apikeys.views.RollbackSnapshotView.post:8
#: ../../../apikeys/views.py:docstring of apikeys.views.RunScriptView.post:6
#: ../../../apikeys/views.py:docstring of apikeys.views.ScreenshotVMView.get_user_or_key_error:14
#: ../../../apikeys/views.py:docstring of apikeys.views.ScreenshotVMView.post:16
#: ../../../apikeys/views.py:docstring of apikeys.views.ShutdownVMView.get_user_or_key_error:14
#: ../../../apikeys/views.py:docstring of apikeys.views.ShutdownVMView.post:8
#: ../../../apikeys/views.py:docstring of apikeys.views.SnapshotListView.get:7
#: ../../../apikeys/views.py:docstring of apikeys.views.StartTapInterfaceView.post:16
#: ../../../apikeys/views.py:docstring of apikeys.views.StartVMView.post:7
#: ../../../apikeys/views.py:docstring of apikeys.views.StopTapInterfaceView.post:16
#: ../../../apikeys/views.py:docstring of apikeys.views.StopVMView.post:7
#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView.get_user_or_key_error:15
#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView.post:17
#: ../../../apikeys/views.py:docstring of apikeys.views.create_snapshot:9
#: ../../../apikeys/views.py:docstring of apikeys.views.delete_snapshot:10
#: ../../../apikeys/views.py:docstring of apikeys.views.find_available_port:7
#: ../../../apikeys/views.py:docstring of apikeys.views.get_available_memory:7
#: ../../../apikeys/views.py:docstring of apikeys.views.get_snapshots:11
#: ../../../apikeys/views.py:docstring of apikeys.views.rollback_snapshot:10
#: ../../../apikeys/views.py:docstring of apikeys.views.screendump:12
msgid "Returns:"
msgstr ""

#: ../../../apikeys/admin.py:docstring of apikeys.admin.MaskedInput.format_value:7
msgid "str: The masked value."
msgstr ""

#: ../../source/apikeys.rst:24
msgid "apikeys.apps module"
msgstr ""

#: ../../../apikeys/apps.py:docstring of apikeys.apps.ApikeysConfig:1
msgid "Bases: :py:class:`~django.apps.config.AppConfig`"
msgstr ""

#: ../../../apikeys/apps.py:docstring of apikeys.apps.ApikeysConfig:1
msgid "AppConfig for the 'apikeys' app."
msgstr ""

#: ../../../apikeys/apps.py:docstring of apikeys.apps.ApikeysConfig:3
msgid "This class represents the configuration for the 'apikeys' app. It specifies the default auto field and the name of the app."
msgstr ""

#: ../../source/apikeys.rst:32
msgid "apikeys.models module"
msgstr ""

#: ../../../apikeys/models.py:docstring of apikeys.models.ApiKey:1
msgid "Bases: :py:class:`~django.db.models.base.Model`"
msgstr ""

#: ../../../apikeys/models.py:docstring of apikeys.models.ApiKey:1
msgid "Model representing an API key associated with a user."
msgstr ""

#: ../../../apikeys/models.py:docstring of apikeys.models.ApiKey.DoesNotExist:1
msgid "Bases: :py:class:`~django.core.exceptions.ObjectDoesNotExist`"
msgstr ""

#: ../../../apikeys/models.py:docstring of apikeys.models.ApiKey.MultipleObjectsReturned:1
msgid "Bases: :py:class:`~django.core.exceptions.MultipleObjectsReturned`"
msgstr ""

#: ../../docstring of apikeys.models.ApiKey.created_at:1
#: ../../docstring of apikeys.models.ApiKey.id:1
#: ../../docstring of apikeys.models.ApiKey.key:1
msgid "A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed."
msgstr ""

#: ../../../apikeys/models.py:docstring of apikeys.models.ApiKey.mask_key:1
msgid "Return a masked version of the API key."
msgstr ""

#: ../../docstring of apikeys.models.ApiKey.user:1
msgid "Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation."
msgstr ""

#: ../../docstring of apikeys.models.ApiKey.user:4
msgid "In the example::"
msgstr ""

#: ../../docstring of apikeys.models.ApiKey.user:9
msgid "``Child.parent`` is a ``ForwardManyToOneDescriptor`` instance."
msgstr ""

#: ../../source/apikeys.rst:40
msgid "apikeys.serializers module"
msgstr ""

#: ../../../apikeys/serializers.py:docstring of apikeys.serializers:1
msgid "This code defines a serializer class ApiKeySerializer that is used to serialize and deserialize instances of the ApiKey model."
msgstr ""

#: ../../../apikeys/serializers.py:docstring of apikeys.serializers:4
msgid "The ApiKeySerializer class inherits from the ModelSerializer class provided by the Django REST Framework. It specifies the ApiKey model as the model attribute in the Meta class."
msgstr ""

#: ../../../apikeys/serializers.py:docstring of apikeys.serializers:7
msgid "The fields attribute in the Meta class specifies the fields that should be included in the serialized representation of the ApiKey model. In this case, it includes only the key field."
msgstr ""

#: ../../../apikeys/serializers.py:docstring of apikeys.serializers:10
msgid "By using this serializer, one can easily convert instances of the ApiKey model to JSON format (serialization) and vice versa (deserialization) when working with API requests and responses."
msgstr ""

#: ../../../apikeys/serializers.py:docstring of apikeys.serializers.ApiKeySerializer:1
msgid "Bases: :py:class:`~rest_framework.serializers.ModelSerializer`"
msgstr ""

#: ../../source/apikeys.rst:48
msgid "apikeys.tests module"
msgstr ""

#: ../../source/apikeys.rst:56
msgid "apikeys.urls module"
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:1
msgid "The purpose of the program is to provide a set of API endpoints for managing a forensic virtual machine (VM). Each view class represents a specific functionality that can be accessed through the corresponding API endpoint. Here's a summary of each view's purpose:"
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:5
msgid "ProtectedView: A view that requires API key authentication. Returns an access granted message if the API key is valid."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:7
msgid "RunScriptView: Executes a script provided in the request data. Expects an API key and a script parameter. Returns the script output and error code."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:10
msgid "DeleteVMView: Deletes the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:12
msgid "MountFolderView: Mounts a specified folder to the VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:14
msgid "ResetVMView: Resets the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:16
msgid "ShutdownVMView: Shuts down the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:18
msgid "DownloadScreenshotsView: Downloads a zip file containing screenshots of the VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:20
msgid "CreateSshKeysView: Adds a public SSH key to the authorized keys file of the forensic investigator user."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:22
msgid "ForensicImageVMStatus: Retrieves the status of the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:24
msgid "StartVMView: Starts the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:26
msgid "StopVMView: Stops the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:28
msgid "CheckVMExistsView: Checks if the forensic VM with the given UUID exists."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:30
msgid "ScreenshotVMView: Takes a screenshot of the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:32
msgid "MemorySnapshotView: Takes a memory snapshot of the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:34
msgid "DownloadEvidenceView: Downloads the evidence file of the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:36
msgid "CreateFoldersView: Creates necessary folders for the forensic VM."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:38
msgid "ListISOFilesView: Lists ISO files available for the forensic VM."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:40
msgid "UploadISOView: Uploads an ISO file for the forensic VM."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:42
msgid "DeleteISOFileView: Deletes the specified ISO file for the forensic VM."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:44
msgid "EjectCDROMView: Ejects the CD/DVD drive of the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:46
msgid "InsertCDROMView: Inserts a specified CD/DVD into the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:48
msgid "InsertNetworkCardView: Inserts a network card into the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:50
msgid "ListPluginsView: Lists available plugins."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:52
msgid "RunPluginView: Runs a specified plugin."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:54
msgid "RecreateFoldersView: Recreates necessary folders for the forensic VM."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:56
msgid "SnapshotListView: Lists snapshots for the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:58
msgid "CreateSnapshotView: Creates a snapshot of the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:60
msgid "RollbackSnapshotView: Rolls back to a specified snapshot of the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:62
msgid "DeleteSnapshotView: Deletes the specified snapshot of the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:64
msgid "MemorySizeView: Retrieves the memory size of the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:66
msgid "ChangeMemorySizeView: Changes the memory size of the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:68
msgid "GetAvailableMemoryView: Retrieves the available memory of the forensic VM."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:70
msgid "StartTapInterfaceView: Starts the tap interface for capturing network traffic."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:72
msgid "StopTapInterfaceView: Stops the tap interface for capturing network traffic."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:74
msgid "CheckTapInterfaceView: Checks the status of the tap interface for capturing network traffic."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:76
msgid "DownloadNetworkPcapView: Downloads a network pcap file for the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:78
msgid "ChangeVMDateTimeView: Changes the date and time of the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:80
msgid "RemoveVMDateTimeView: Removes the date and time configuration of the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:82
msgid "DownloadVideoView: Downloads a video recording of the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:84
msgid "RecordVideoVMView: Starts recording a video of the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:86
msgid "StopVideoRecordingVMView: Stops recording a video of the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:88
msgid "CheckRecordingStatusVMView: Checks the recording status of the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:90
msgid "ListVideosView: Lists available video recordings of the forensic VM with the given UUID."
msgstr ""

#: ../../../apikeys/urls.py:docstring of apikeys.urls:92
msgid "CheckUserAuthenticatedView: Checks if the user is authenticated via an API key."
msgstr ""

#: ../../source/apikeys.rst:64
msgid "apikeys.views module"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeMemorySizeView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeVMDateTimeView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckTapInterfaceView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.CreateFoldersView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.CreateSnapshotView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteISOFileView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteSnapshotView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadEvidenceView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadNetworkPcapView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadScreenshotsView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.EjectCDROMView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.GetAvailableMemoryView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.InsertCDROMView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.InsertNetworkCardView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySizeView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySnapshotView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.RecreateFoldersView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.RemoveVMDateTimeView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.ResetVMView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.RollbackSnapshotView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.ScreenshotVMView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.ShutdownVMView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.SnapshotListView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.StartTapInterfaceView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.StopTapInterfaceView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.UploadISOView:1
msgid "Bases: :py:class:`~django.views.generic.base.View`"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeMemorySizeView:1
msgid "API View that handles POST requests to change the memory size of a Virtual Machine (VM)."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeMemorySizeView:3
msgid "This view requires an API key for authentication and a POST body containing a new memory size. If the API key is valid and is associated with an active user, and the POST body contains a valid memory size, the script files in the VM directory are updated with the new memory size."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeMemorySizeView:7
msgid "If the API key is missing, invalid, or associated with an inactive user, or if the memory size is invalid, an error message is returned."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeMemorySizeView:10
msgid "The response indicates whether the memory size update was successful or not in a JSON format: {"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeMemorySizeView:12
#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteSnapshotView:11
#: ../../../apikeys/views.py:docstring of apikeys.views.RollbackSnapshotView:11
msgid "\"message\": <string>"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeMemorySizeView:13
#: ../../../apikeys/views.py:docstring of apikeys.views.CreateSnapshotView:15
#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteSnapshotView:16
#: ../../../apikeys/views.py:docstring of apikeys.views.GetAvailableMemoryView:12
#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySizeView:16
#: ../../../apikeys/views.py:docstring of apikeys.views.RollbackSnapshotView:16
#: ../../../apikeys/views.py:docstring of apikeys.views.SnapshotListView:15
msgid "}"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeMemorySizeView.post:1
msgid "Handles the POST request to change the memory size of a VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeMemorySizeView.post:4
msgid "request: The HTTP request from the client. Expected to contain the API key in the headers and the new"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeMemorySizeView.post:5
msgid "memory size in the POST body."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeMemorySizeView.post:6
msgid "uuid: The UUID of the VM whose memory size is to be changed."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeMemorySizeView.post:9
#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteSnapshotView.post:9
#: ../../../apikeys/views.py:docstring of apikeys.views.RollbackSnapshotView.post:9
msgid "JsonResponse: A JsonResponse that either contains a success message or an error message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeVMDateTimeView:1
msgid "View to change the datetime in a VM's configuration."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeVMDateTimeView:3
msgid "The view has no authentication or permission restrictions. The post method is used to handle the updating of the datetime in the configuration of a VM with a given UUID."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeVMDateTimeView.post:1
msgid "Handle a POST request to change the datetime in a VM's configuration."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeVMDateTimeView.post:3
msgid "This method first checks if there is an API key error. If there's an API key error, it returns a JSON response with the error. The method then retrieves the UUID and the datetime from the POST data and validates the datetime format. If the datetime format is invalid, it returns a JSON response indicating the error. It locates the .sh configuration file for the VM with the provided UUID, reads its content, and changes or adds a line with the '-rtc base=' string and the new datetime. If successful, the method returns a JSON response indicating the successful operation. If there's an error, it returns a JSON response with the error message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeVMDateTimeView.post:12
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView.get:9
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView.get_user_or_key_error:10
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckTapInterfaceView.post:11
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView.get:8
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView.get_user_or_key_error:11
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadNetworkPcapView.get:11
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get:8
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get_user_or_key_error:11
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView.get:8
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView.get_user_or_key_error:11
#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.get_user_or_key_error:10
#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.post:10
#: ../../../apikeys/views.py:docstring of apikeys.views.RemoveVMDateTimeView.post:11
#: ../../../apikeys/views.py:docstring of apikeys.views.StartTapInterfaceView.post:11
#: ../../../apikeys/views.py:docstring of apikeys.views.StopTapInterfaceView.post:11
#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView.get_user_or_key_error:10
#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView.post:10
#: ../../../apikeys/views.py:docstring of apikeys.views.create_video:9
msgid "Parameters:"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeVMDateTimeView.post:14
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView.get:10
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView.get_user_or_key_error:12
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckTapInterfaceView.post:13
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView.get:10
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView.get_user_or_key_error:13
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadNetworkPcapView.get:12
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get:9
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get_user_or_key_error:13
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView.get:9
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView.get_user_or_key_error:13
#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.get_user_or_key_error:12
#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.post:11
#: ../../../apikeys/views.py:docstring of apikeys.views.RemoveVMDateTimeView.post:13
#: ../../../apikeys/views.py:docstring of apikeys.views.StartTapInterfaceView.post:13
#: ../../../apikeys/views.py:docstring of apikeys.views.StopTapInterfaceView.post:13
#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView.get_user_or_key_error:12
#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView.post:11
msgid "request"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeVMDateTimeView.post:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView.get:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView.get_user_or_key_error:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckTapInterfaceView.post:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView.get:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView.get_user_or_key_error:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadNetworkPcapView.get:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get_user_or_key_error:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView.get:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView.get_user_or_key_error:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.get_user_or_key_error:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.post:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.RemoveVMDateTimeView.post:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.StartTapInterfaceView.post:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.StopTapInterfaceView.post:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView.get_user_or_key_error:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView.post:-1
msgid "django.http.HttpRequest"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeVMDateTimeView.post:14
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView.get:11
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView.get_user_or_key_error:12
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckTapInterfaceView.post:13
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView.get:10
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView.get_user_or_key_error:13
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadNetworkPcapView.get:13
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get:10
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get_user_or_key_error:13
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView.get:10
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView.get_user_or_key_error:13
#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.get_user_or_key_error:12
#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.post:12
#: ../../../apikeys/views.py:docstring of apikeys.views.RemoveVMDateTimeView.post:13
#: ../../../apikeys/views.py:docstring of apikeys.views.StartTapInterfaceView.post:13
#: ../../../apikeys/views.py:docstring of apikeys.views.StopTapInterfaceView.post:13
#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView.get_user_or_key_error:12
#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView.post:12
msgid "The request instance for the current request."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeVMDateTimeView.post:18
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView.get:17
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckTapInterfaceView.post:17
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView.get:14
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView.get:16
#: ../../../apikeys/views.py:docstring of apikeys.views.RemoveVMDateTimeView.post:17
#: ../../../apikeys/views.py:docstring of apikeys.views.StartTapInterfaceView.post:17
#: ../../../apikeys/views.py:docstring of apikeys.views.StopTapInterfaceView.post:17
#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView.post:18
msgid "django.http.JsonResponse"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ChangeVMDateTimeView.post:19
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView.get:18
#: ../../../apikeys/views.py:docstring of apikeys.views.RemoveVMDateTimeView.post:18
#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView.post:19
msgid "A JsonResponse indicating the result of the operation."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView:1
msgid "View to check the status of video recording."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView:3
msgid "The view uses session authentication and has no permission restrictions. The get method is used to handle the checking of the video recording status for a VM with a given UUID."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView.get:1
msgid "Handle a GET request to check video recording status for a VM with a given UUID."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView.get:3
msgid "This method first checks if the user is authenticated or if there is an API key error. If there's an API key error, it returns a JSON response with the error. If the UUID is present in the recordings and is recording, it returns a JSON response indicating the recording is in progress. If the UUID is not present or not recording, it returns a JSON response indicating no recording is in progress."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView.get:13
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadNetworkPcapView.get:15
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get:11
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView.get:12
#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.post:14
#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView.post:14
#: ../../../apikeys/views.py:docstring of apikeys.views.create_video:10
msgid "uuid"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView.get:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadNetworkPcapView.get:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView.get:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.post:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView.post:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.create_video:-1
msgid "str"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView.get:13
msgid "The UUID of the VM for which the recording status should be checked."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView.get_user_or_key_error:1
#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.get_user_or_key_error:1
#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView.get_user_or_key_error:1
msgid "Check if the user is authenticated or if there is an API key error."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView.get_user_or_key_error:3
#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.get_user_or_key_error:3
#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView.get_user_or_key_error:3
msgid "This method checks if the user associated with the request is authenticated. If the user is not authenticated, it checks if there's an API key in the request. If the API key is valid and associated with an active user, the method returns this user. If the API key is not valid or the user is not active, it returns a JSON response with the corresponding error. If there's no API key at all, it returns a JSON response indicating that the API key is required."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView.get_user_or_key_error:17
#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView.get_user_or_key_error:18
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get_user_or_key_error:18
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView.get_user_or_key_error:18
#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.get_user_or_key_error:17
#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView.get_user_or_key_error:17
msgid "tuple"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckRecordingStatusVMView.get_user_or_key_error:17
#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.get_user_or_key_error:17
#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView.get_user_or_key_error:17
msgid "A tuple where the first element is the authenticated user or None, and the second element is a JsonResponse with an error message or None."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckTapInterfaceView:1
msgid "View to check the status of the tap interface of a VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckTapInterfaceView:3
msgid "The view has no authentication or permission restrictions. The post method is used to handle the status checking of the tap interface of a VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckTapInterfaceView.post:1
msgid "Handle a POST request to check the status of the tap interface of a VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckTapInterfaceView.post:3
msgid "This method first checks if there is an API key error. If there's an API key error, it returns a JSON response with the error. The method then gets the UUID from the POST data and checks the status of the tap interface. It executes shell commands to get the tap interface and checks its status. If the tap interface is up, the method returns a JSON response with a positive status and message. If the tap interface is down, the method returns a JSON response with a negative status and message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckTapInterfaceView.post:18
msgid "A JsonResponse with the status and message about the status of the tap interface."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView:1
msgid "A Django View class for checking if a user is authenticated."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView:3
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView:3
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView:3
msgid "This class uses SessionAuthentication for user authentication. It doesn't implement any specific permission classes."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView:7
#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteISOFileView:11
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView:7
#: ../../../apikeys/views.py:docstring of apikeys.views.EjectCDROMView:13
#: ../../../apikeys/views.py:docstring of apikeys.views.InsertCDROMView:13
#: ../../../apikeys/views.py:docstring of apikeys.views.InsertNetworkCardView:10
#: ../../../apikeys/views.py:docstring of apikeys.views.ListISOFilesView:11
#: ../../../apikeys/views.py:docstring of apikeys.views.ListPluginsView:11
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView:7
#: ../../../apikeys/views.py:docstring of apikeys.views.UploadISOView:11
msgid "Attributes:"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView:8
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView:8
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView:8
msgid "authentication_classes"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView:-1
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView:-1
msgid "list"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView:9
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView:9
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView:9
msgid "List of authentication classes the view uses. Here, it's SessionAuthentication."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView:11
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView:11
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView:11
msgid "permission_classes"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView:11
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView:11
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView:11
msgid "List of permission classes the view uses. Here, it's an empty list."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView:14
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView:14
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView:14
msgid "Methods:"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView:17
msgid "get(request):"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView:16
msgid "Returns a JsonResponse indicating if a user is authenticated."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView.get:1
msgid "Handles GET request to the view."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView.get:3
msgid "This method retrieves a user from the request or an API key error if one occurred. It then checks if the user is authenticated by checking if any API key error occurred. If the user is authenticated, it returns a JSON response with the 'authenticated' key set to True."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView.get:15
msgid "A JsonResponse that indicates if the user is authenticated."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView.get_user_or_key_error:1
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get_user_or_key_error:1
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView.get_user_or_key_error:1
msgid "Retrieves the authenticated user from the request or returns an API key error."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView.get_user_or_key_error:3
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get_user_or_key_error:3
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView.get_user_or_key_error:3
msgid "This method attempts to get an authenticated user from the request. If the user is authenticated, it will return the user and None for the error. If the user is not authenticated, it will attempt to authenticate the user using an API key provided in the request. If the API key is valid and associated with an active user, it returns the user and None for the error. If the API key is invalid or the user associated with the key is not active, it returns None for the user and a JsonResponse indicating the error. If no API key is provided in the request, it returns None for the user and a JsonResponse indicating that an API key is required."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckUserAuthenticatedView.get_user_or_key_error:18
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get_user_or_key_error:18
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView.get_user_or_key_error:18
msgid "A tuple where the first element is the authenticated user or None if no user could be authenticated, and the second element is None or a JsonResponse containing an error message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckVMExistsView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.CreateSshKeysView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteVMView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.ForensicImageVMStatus:1
#: ../../../apikeys/views.py:docstring of apikeys.views.ListISOFilesView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.ListPluginsView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.MountFolderView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.ProtectedView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.RunPluginView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.RunScriptView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.StartVMView:1
#: ../../../apikeys/views.py:docstring of apikeys.views.StopVMView:1
msgid "Bases: :py:class:`~rest_framework.views.APIView`"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckVMExistsView:1
msgid "This Django View handles GET requests to check if a VM exists. It authenticates the request and then checks the existence of the specified VM's directory in the filesystem."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckVMExistsView:4
#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteVMView:4
#: ../../../apikeys/views.py:docstring of apikeys.views.MountFolderView:4
#: ../../../apikeys/views.py:docstring of apikeys.views.ResetVMView:4
#: ../../../apikeys/views.py:docstring of apikeys.views.ShutdownVMView:4
msgid "The VM is identified by its UUID, which should be included in the URL of the request."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckVMExistsView.get:1
msgid "This method handles the GET request to check if a VM exists. It checks for user authentication, verifies the existence of the VM, and then returns a JSON response with the result."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckVMExistsView.get:5
msgid "request (django.http.HttpRequest): The request instance. uuid (str): The UUID of the VM to be checked."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CheckVMExistsView.get:9
msgid "rest_framework.response.Response: A JSON response indicating whether the VM exists."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateFoldersView:1
msgid "This class-based view handles the POST request to create specified folders in a qcow2 disk image."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateFoldersView:3
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadEvidenceView:3
msgid "The method checks the validity and activity status of the provided API key. If the API key is invalid or belongs to an inactive user, it returns an error message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateFoldersView:6
msgid "It then retrieves the list of folders and the UUID path from the request data. It uses the UUID path to form the path to the qcow2 file."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateFoldersView:9
msgid "It checks if the qcow2 file exists. If it doesn't, it returns an error."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateFoldersView:11
msgid "It calls the change_qcow2 function to create the folders in the qcow2 file. If successful, it returns a success message. If an error occurs, it returns an error message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateFoldersView:14
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadEvidenceView:15
msgid "Attributes: authentication_classes (list): A list of authentication classes to use for the view. permission_classes (list): A list of permission classes to use for the view."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateFoldersView:18
msgid "Methods: post(request): Asynchronously handles the POST request."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateFoldersView.post:1
msgid "Asynchronously handles the POST request to create folders in a qcow2 file."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateFoldersView.post:3
#: ../../../apikeys/views.py:docstring of apikeys.views.EjectCDROMView.get_user_or_key_error:6
#: ../../../apikeys/views.py:docstring of apikeys.views.InsertCDROMView.get_user_or_key_error:6
#: ../../../apikeys/views.py:docstring of apikeys.views.ListISOFilesView.get:7
#: ../../../apikeys/views.py:docstring of apikeys.views.ListPluginsView.get:11
#: ../../../apikeys/views.py:docstring of apikeys.views.RunPluginView.get:16
#: ../../../apikeys/views.py:docstring of apikeys.views.UploadISOView.post:7
msgid "Parameters: request (HttpRequest): The request object that has triggered this method."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateFoldersView.post:6
msgid "Returns: JsonResponse: A JSON object containing a success message if the folders were created successfully,"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateFoldersView.post:8
msgid "or an error message otherwise."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateSnapshotView:1
msgid "API View that handles POST requests to create a snapshot of a specific VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateSnapshotView:3
msgid "This view requires an API key for authentication. If the API key is valid and is associated with an active user, it calls the `create_snapshot` asynchronous function to create the snapshot."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateSnapshotView:6
#: ../../../apikeys/views.py:docstring of apikeys.views.GetAvailableMemoryView:7
#: ../../../apikeys/views.py:docstring of apikeys.views.SnapshotListView:6
msgid "If the API key is missing, invalid, or associated with an inactive user, an error message is returned."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateSnapshotView:8
msgid "The response indicates either the snapshot name or an error message in a JSON format: {"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateSnapshotView:10
msgid "\"snapshot_name\": <string>"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateSnapshotView:11
#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteSnapshotView:12
#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySizeView:12
#: ../../../apikeys/views.py:docstring of apikeys.views.RollbackSnapshotView:12
#: ../../../apikeys/views.py:docstring of apikeys.views.SnapshotListView:11
msgid "} or {"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateSnapshotView:14
#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteSnapshotView:15
#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySizeView:15
#: ../../../apikeys/views.py:docstring of apikeys.views.RollbackSnapshotView:15
#: ../../../apikeys/views.py:docstring of apikeys.views.SnapshotListView:14
msgid "\"error\": <string>"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateSnapshotView.post:1
msgid "Handles the POST request to create a snapshot of a VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateSnapshotView.post:4
msgid "request: The HTTP request from the client. Expected to contain the API key in the headers. uuid: The UUID of the VM to create the snapshot."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateSnapshotView.post:8
msgid "JsonResponse: A JsonResponse that either contains the snapshot name or an error message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateSshKeysView:1
msgid "API endpoint that allows the creation of SSH keys by adding a public key to the authorized keys file of the forensic investigator user."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateSshKeysView:3
msgid "This view accepts a POST request with a public key as a parameter. The public key is added to the authorized keys file of the forensic investigator user. An API key or session-based authentication is required."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateSshKeysView.post:1
msgid "Adds a public key to the authorized keys file of the forensic investigator user."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateSshKeysView.post:4
#: ../../../apikeys/views.py:docstring of apikeys.views.RunScriptView.post:4
msgid "request: The POST request received by the server."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.CreateSshKeysView.post:7
msgid "Response: A Django Response object containing the result of adding the public key to the authorized keys file."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteISOFileView:1
msgid "This is a Django view that provides an endpoint for deleting an ISO file from a specified directory."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteISOFileView:3
msgid "The DeleteISOFileView class handles HTTP POST requests to delete an ISO file identified by its filename."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteISOFileView:5
#: ../../../apikeys/views.py:docstring of apikeys.views.UploadISOView:5
msgid "The class uses Django's View, which means it can handle different types of HTTP requests. It currently only implements handling of POST requests via the defined post() method."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteISOFileView:9
#: ../../../apikeys/views.py:docstring of apikeys.views.ListISOFilesView:9
#: ../../../apikeys/views.py:docstring of apikeys.views.UploadISOView:9
msgid "authentication_classes (list): A list of authentication classes the view should use. It's empty in this case. permission_classes (list): A list of permissions the view should enforce. It's empty in this case."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteISOFileView.post:1
msgid "This method handles the POST request to delete an ISO file."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteISOFileView.post:3
msgid "It first validates the API key from the request. If the API key is valid and belongs to an active user, it checks if the ISO directory and the specified ISO file exist. If they do, it deletes the ISO file and returns a confirmation message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteISOFileView.post:7
msgid "Parameters: request (HttpRequest): The request object that has triggered this method. filename (str): The name of the ISO file to be deleted."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteISOFileView.post:11
#: ../../../apikeys/views.py:docstring of apikeys.views.EjectCDROMView.get:10
#: ../../../apikeys/views.py:docstring of apikeys.views.InsertCDROMView.get:11
#: ../../../apikeys/views.py:docstring of apikeys.views.InsertNetworkCardView.get:10
#: ../../../apikeys/views.py:docstring of apikeys.views.UploadISOView.post:10
msgid "Returns: JsonResponse: A JSON object containing a confirmation message or an error message with an HTTP status code."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteSnapshotView:1
msgid "API View that handles POST requests to delete a snapshot of a specific VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteSnapshotView:3
msgid "This view requires an API key for authentication. If the API key is valid and is associated with an active user, it calls the `delete_snapshot` asynchronous function to delete the snapshot."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteSnapshotView:6
#: ../../../apikeys/views.py:docstring of apikeys.views.RollbackSnapshotView:6
msgid "If the API key is missing, invalid, or associated with an inactive user, or if the snapshot name is missing in the request data, an error message is returned."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteSnapshotView:9
#: ../../../apikeys/views.py:docstring of apikeys.views.RollbackSnapshotView:9
msgid "The response indicates either a success or an error message in a JSON format: {"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteSnapshotView.post:1
msgid "Handles the POST request to delete a snapshot of a VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteSnapshotView.post:4
#: ../../../apikeys/views.py:docstring of apikeys.views.RollbackSnapshotView.post:4
msgid "request: The HTTP request from the client. Expected to contain the API key in the headers,"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteSnapshotView.post:5
#: ../../../apikeys/views.py:docstring of apikeys.views.RollbackSnapshotView.post:5
msgid "and the snapshot name in the request data."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteSnapshotView.post:6
msgid "uuid: The UUID of the VM whose snapshot is to be deleted."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteVMView:1
msgid "This Django View handles POST requests to delete a VM. It authenticates the request and then removes the specified VM's directory from the filesystem."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteVMView.post:1
msgid "This method handles the POST request to delete a VM. It checks for user authentication, verifies the existence of the VM, and then deletes the VM's directory."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteVMView.post:5
msgid "request (django.http.HttpRequest): The request instance. uuid (str): The UUID of the VM to be deleted."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DeleteVMView.post:9
#: ../../../apikeys/views.py:docstring of apikeys.views.MountFolderView.post:9
msgid "rest_framework.response.Response: A JSON response with the result of the operation."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadEvidenceView:1
msgid "This class-based view handles the GET request to download a VMDK evidence file related to a specific VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadEvidenceView:6
msgid "It uses the UUID from the URL parameters to form the path to the VM directory and checks if it exists."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadEvidenceView:8
msgid "It then forms the path to the qcow2 file and converts it to a VMDK file using qemu-img. If this process fails, it returns an error message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadEvidenceView:11
msgid "It checks if the VMDK evidence file exists. If it doesn't, it returns an error."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadEvidenceView:13
msgid "Finally, it returns the evidence file as a FileResponse, allowing the client to download it."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadEvidenceView:19
msgid "Methods: get(request, uuid): Asynchronously handles the GET request."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadEvidenceView.get:1
msgid "Asynchronously handles the GET request to download a VMDK evidence file."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadEvidenceView.get:3
msgid "Parameters: request (HttpRequest): The request object that has triggered this method. uuid (str): The UUID of the VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadEvidenceView.get:7
msgid "Returns: FileResponse: A FileResponse object containing the VMDK evidence file,"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadEvidenceView.get:9
msgid "or a JsonResponse object containing an error message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadNetworkPcapView:1
msgid "View to download the pcap files of a VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadNetworkPcapView:3
msgid "The view has no authentication or permission restrictions. The get method is used to handle the downloading of pcap files of a VM with a given UUID."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadNetworkPcapView.get:1
msgid "Handle a GET request to download the pcap files of a VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadNetworkPcapView.get:3
msgid "This method first checks if there is an API key error. If there's an API key error, it returns a JSON response with the error. The method then checks if the VM with the provided UUID exists. If the VM does not exist, it returns a JSON response indicating the error. It creates a zip file of all pcap files associated with the VM. If successful, the method returns a FileResponse with the created zip file."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadNetworkPcapView.get:15
msgid "The UUID of the VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadNetworkPcapView.get:19
#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get:19
msgid "django.http.FileResponse"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadNetworkPcapView.get:20
msgid "A FileResponse with the zip file of the pcap files of the VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadScreenshotsView:1
msgid "This is an API view for downloading all the screenshots of a Virtual Machine (VM) as a ZIP file. It requires the UUID of the VM to be specified as a path parameter in the URL."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadScreenshotsView:4
#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySnapshotView:4
msgid "Authentication is done via an API key which must be included in the request headers."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadScreenshotsView:6
msgid "This view will attempt to collect all the screenshots of the VM, convert them to JPG format if necessary, compress them into a ZIP file, and then return it as a file download."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadScreenshotsView.get:1
msgid "Handle the GET request to the DownloadScreenshotsView."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadScreenshotsView.get:3
msgid "The function will first authenticate the user using the API key provided in the headers. If the user is authenticated, it will proceed to collect all the screenshots of the VM specified by the UUID in the URL, convert them to JPG format, compress them into a ZIP file, and then return the ZIP file as a response."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadScreenshotsView.get:9
msgid "request: The HTTP request. uuid: The UUID of the VM to download the screenshots from."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadScreenshotsView.get:13
msgid "A FileResponse with the ZIP file containing all screenshots. If an error occurs, a JsonResponse with an error message will be returned."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView:1
msgid "A Django APIView class for downloading a video file."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView:17
msgid "get(request, uuid, filename):"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView:16
msgid "Returns a FileResponse to download a video file."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get:1
msgid "Handles GET request to download a video."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get:3
msgid "This method checks if the user is authenticated, validates the filename, constructs the file path, checks if the file exists, and returns a FileResponse for the client to download the video."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get:12
#: ../../../apikeys/views.py:docstring of apikeys.views.create_video:11
msgid "The unique identifier for the video file's directory."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get:14
msgid "filename"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get:14
msgid "The name of the video file to download."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get:19
msgid "A FileResponse that initiates the video file download."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get:22
#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.post:22
#: ../../../apikeys/views.py:docstring of apikeys.views.create_and_format_qcow2:13
#: ../../../apikeys/views.py:docstring of apikeys.views.create_video:16
#: ../../../apikeys/views.py:docstring of apikeys.views.find_available_port:9
#: ../../../apikeys/views.py:docstring of apikeys.views.screendump:14
#: ../../../apikeys/views.py:docstring of apikeys.views.system_reset:7
#: ../../../apikeys/views.py:docstring of apikeys.views.system_shutdown:7
msgid "Raises:"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get:23
msgid "Http404"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.DownloadVideoView.get:24
msgid "If the video file does not exist."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.EjectCDROMView:1
msgid "This is a Django view that provides an endpoint for ejecting the CD-ROM from a virtual machine."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.EjectCDROMView:3
msgid "The EjectCDROMView class handles HTTP GET requests to eject the CD-ROM from a virtual machine identified by its unique identifier (uuid)."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.EjectCDROMView:6
#: ../../../apikeys/views.py:docstring of apikeys.views.InsertCDROMView:6
msgid "The class uses Django's View, which means it can handle different types of HTTP requests. It currently only implements handling of GET requests via the defined get() method. It also supports authentication via sessions."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.EjectCDROMView:10
#: ../../../apikeys/views.py:docstring of apikeys.views.InsertCDROMView:10
msgid "authentication_classes (list): A list of authentication classes the view should use."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.EjectCDROMView:11
#: ../../../apikeys/views.py:docstring of apikeys.views.InsertCDROMView:11
msgid "It includes SessionAuthentication."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.EjectCDROMView:12
#: ../../../apikeys/views.py:docstring of apikeys.views.InsertCDROMView:12
msgid "permission_classes (list): A list of permissions the view should enforce. Empty in this case."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.EjectCDROMView.get:1
msgid "This method handles the GET request to eject the CD-ROM from a virtual machine."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.EjectCDROMView.get:3
msgid "It first validates the user or API key from the request. If the user is authenticated or the API key is valid, it calls the asynchronous function eject_cdrom() to eject the CD-ROM and returns a confirmation message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.EjectCDROMView.get:6
#: ../../../apikeys/views.py:docstring of apikeys.views.InsertNetworkCardView.get:6
msgid "Parameters: request (HttpRequest): The request object that has triggered this method. uuid (str): The unique identifier of the virtual machine."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.EjectCDROMView.get_user_or_key_error:1
#: ../../../apikeys/views.py:docstring of apikeys.views.InsertCDROMView.get_user_or_key_error:1
msgid "This method handles the user authentication and API key validation."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.EjectCDROMView.get_user_or_key_error:3
#: ../../../apikeys/views.py:docstring of apikeys.views.InsertCDROMView.get_user_or_key_error:3
msgid "It checks if the user is authenticated. If not, it validates the API key from the request. If the API key is invalid or belongs to an inactive user, it returns a JSON response with an error message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.EjectCDROMView.get_user_or_key_error:9
#: ../../../apikeys/views.py:docstring of apikeys.views.InsertCDROMView.get_user_or_key_error:9
msgid "Returns: tuple: A tuple containing the user (if authenticated or API key is valid) and a JSON response (if any error occurs)."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ForensicImageVMStatus:1
msgid "API endpoint that allows retrieval of the status of a forensic image VM via GET requests."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ForensicImageVMStatus:3
msgid "This view accepts a GET request with a UUID and returns the status of the corresponding forensic image VM. If the VM path or mode file cannot be found, it returns a 404 Not Found error. An API key or session-based authentication is required."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ForensicImageVMStatus.get:1
msgid "Retrieves the status of the forensic image VM specified by the UUID."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ForensicImageVMStatus.get:4
msgid "request: The GET request received by the server. uuid: The UUID of the forensic image VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ForensicImageVMStatus.get:8
msgid "Response: A Django Response object containing the VM status and related information."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.GetAvailableMemoryView:1
msgid "API View that handles GET requests to retrieve available system memory."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.GetAvailableMemoryView:3
msgid "This view requires an API key for authentication. If the API key is valid and is associated with an active user, the system's available memory is returned. The available memory is calculated using the get_available_memory function."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.GetAvailableMemoryView:9
msgid "The available memory is returned in a JSON format: {"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.GetAvailableMemoryView:11
msgid "\"available_memory\": <float>"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.GetAvailableMemoryView.get:1
msgid "Handles the GET request to retrieve the system's available memory."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.GetAvailableMemoryView.get:4
msgid "request: The HTTP request from the client. Expected to contain the API key in the headers."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.GetAvailableMemoryView.get:7
msgid "JsonResponse: A JsonResponse that either contains the available memory or an error message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.InsertCDROMView:1
msgid "This is a Django view that provides an endpoint for inserting a CD-ROM into a virtual machine."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.InsertCDROMView:3
msgid "The InsertCDROMView class handles HTTP GET requests to insert a CD-ROM into a virtual machine identified by its unique identifier (uuid) and the filename of the ISO image."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.InsertCDROMView.get:1
msgid "This method handles the GET request to insert a CD-ROM into a virtual machine."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.InsertCDROMView.get:3
msgid "It first validates the user or API key from the request. If the user is authenticated or the API key is valid, it calls the asynchronous function insert_cdrom() to insert the CD-ROM and returns a confirmation message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.InsertCDROMView.get:6
msgid "Parameters: request (HttpRequest): The request object that has triggered this method. uuid (str): The unique identifier of the virtual machine. filename (str): The filename of the ISO image to insert into the CD-ROM drive."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.InsertNetworkCardView:1
msgid "This is a Django view that provides an endpoint for inserting a network card into a virtual machine."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.InsertNetworkCardView:3
msgid "The InsertNetworkCardView class handles HTTP GET requests to insert a network card into a virtual machine identified by its unique identifier (uuid). The class uses Django's View, which means it can handle different types of HTTP requests. It currently only implements handling of GET requests via the defined get() method."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.InsertNetworkCardView:8
#: ../../../apikeys/views.py:docstring of apikeys.views.ListPluginsView:9
msgid "authentication_classes (list): A list of authentication classes the view should use. Empty in this case. permission_classes (list): A list of permissions the view should enforce. Empty in this case."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.InsertNetworkCardView.get:1
msgid "This method handles the GET request to insert a network card into a virtual machine."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.InsertNetworkCardView.get:3
msgid "It first validates the API key from the request. If the key is valid, it calls the asynchronous function insert_network_card() to insert the network card and returns a confirmation message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ListISOFilesView:1
msgid "This is a Django view that provides an endpoint for retrieving a list of all ISO files in a specified directory."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ListISOFilesView:3
msgid "The ListISOFilesView class handles HTTP GET requests to retrieve the ISO files."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ListISOFilesView:5
msgid "The class uses Django's APIView, which allows it to handle different types of HTTP requests. It currently only implements handling of GET requests via the defined get() method."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ListISOFilesView.get:1
msgid "This method handles the GET request to list all ISO files."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ListISOFilesView.get:3
msgid "It first validates the API key from the request. If the API key is valid and belongs to an active user, it checks if the ISO directory exists and retrieves a list of all ISO files in the directory. If the directory does not exist, it returns an error message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ListISOFilesView.get:10
msgid "Returns: JsonResponse: A JSON object containing a list of all ISO files in the directory or an error message with an HTTP status code."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ListPluginsView:1
msgid "This is a Django REST Framework view that extends from the APIView base class."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ListPluginsView:3
msgid "The ListPluginsView class defines behavior for handling HTTP GET requests on the URL path associated with it. The purpose of this class is to provide an endpoint that responds with a list of available forensic plugins. The view uses Django's APIView, which means it can handle different types of HTTP requests. It currently only implements handling of GET requests via the defined get() method."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ListPluginsView.get:1
msgid "Handles GET requests to list all available forensic plugins."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ListPluginsView.get:3
#: ../../../apikeys/views.py:docstring of apikeys.views.RunPluginView.get:3
msgid "The method retrieves the API key from the request headers and validates it. If the API key is invalid or belongs to an inactive user, an error response is returned."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ListPluginsView.get:6
msgid "The method then reads the 'plugins' directory and looks for 'run.sh' files in each of the subdirectories. For each such file found, it gets the plugin information by calling the get_plugin_info() function."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ListPluginsView.get:9
msgid "If the 'plugins' directory does not exist, an error response is returned."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ListPluginsView.get:14
msgid "Returns: JsonResponse: A JSON object containing a list of all available plugins with their names, descriptions and directories."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView:1
msgid "A Django APIView class for listing all the .mp4 video files in a specific directory."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView:17
msgid "get(request, uuid):"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView:16
msgid "Returns a JsonResponse with a list of all .mp4 video files in the specified directory."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView.get:1
msgid "Handles GET request to list all .mp4 video files in a specific directory."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView.get:3
msgid "This method checks if the user is authenticated, constructs the video directory path, checks if the directory exists, and returns a JsonResponse containing a list of all .mp4 video files in the directory, sorted in ascending order."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView.get:12
msgid "The unique identifier for the video files' directory."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ListVideosView.get:17
msgid "A JsonResponse containing a list of all .mp4 video files in the specified directory."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySizeView:1
msgid "API View that handles GET requests to fetch the current memory size of a Virtual Machine (VM)."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySizeView:3
msgid "This view requires an API key for authentication. If the API key is valid and is associated with an active user, the memory size is retrieved from the script files in the VM directory."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySizeView:6
msgid "If the API key is missing, invalid, or associated with an inactive user, or if the memory size cannot be found, an error message is returned."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySizeView:9
msgid "The response indicates either the memory size or an error message in a JSON format: {"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySizeView:11
msgid "\"memory_size\": <int>"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySizeView.get:1
msgid "Handles the GET request to fetch the memory size of a VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySizeView.get:4
msgid "request: The HTTP request from the client. Expected to contain the API key in the headers. uuid: The UUID of the VM whose memory size is to be fetched."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySizeView.get:8
msgid "JsonResponse: A JsonResponse that either contains the memory size or an error message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySnapshotView:1
msgid "This is an API view for creating a memory snapshot of a Virtual Machine (VM) and downloading it. It requires the UUID of the VM to be specified as a path parameter in the URL."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySnapshotView:6
msgid "This view will attempt to create a memory snapshot of the VM and then return it as a file download."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySnapshotView.get:1
msgid "Handle the GET request to the MemorySnapshotView."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySnapshotView.get:3
msgid "The function will first authenticate the user using the API key provided in the headers. If the user is authenticated, it will proceed to create a memory snapshot of the VM specified by the UUID in the URL and then return the snapshot file as a response."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySnapshotView.get:8
msgid "request: The HTTP request. uuid: The UUID of the VM to create a memory snapshot of."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.MemorySnapshotView.get:12
msgid "A FileResponse with the memory snapshot file. If an error occurs, a JsonResponse with an error message will be returned."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.MountFolderView:1
msgid "This Django View handles POST requests to mount a folder in a VM. It authenticates the request and then executes a mount command to bind the specified folder to a location within the VM's filesystem."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.MountFolderView:6
msgid "The folder to be mounted should be specified in the request's JSON body using the 'folder' key."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.MountFolderView.post:1
msgid "This method handles the POST request to mount a folder in a VM. It checks for user authentication, verifies the input folder path, and then sends the mount command."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.MountFolderView.post:5
msgid "request (django.http.HttpRequest): The request instance. uuid (str): The UUID of the VM where the folder is to be mounted."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ProtectedView:1
msgid "API endpoint that creates a protected view requiring an API key for access."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ProtectedView:3
msgid "This view accepts a GET request and checks for the presence of an API key in the request headers. If a valid API key is found, the access is granted and a success message is returned. An API key is required for accessing this view."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ProtectedView.get:1
msgid "Handles the GET request and checks for the presence of a valid API key."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ProtectedView.get:4
msgid "request: The GET request received by the server."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ProtectedView.get:7
msgid "Response: A Django Response object indicating the result of the access check."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView:1
msgid "A Django View class that handles the video recording process of a virtual machine."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView:3
msgid "This class implements the POST HTTP method to start and manage the recording of a video. If the requested virtual machine (identified by uuid) exists and is not already recording, it starts a new recording, creating a video file in a specified directory. The recording runs asynchronously for a maximum duration of three hours or until it is manually stopped."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView:8
msgid "If the virtual machine is already recording, the POST request will return an error."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.post:1
msgid "Asynchronously handle a POST request to start recording a video."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.post:3
msgid "This method attempts to start a recording for the specified virtual machine. It checks if the machine exists and if a recording is not already in progress. If these conditions are met, it sets up a new video file and starts the recording. The recording runs for a maximum duration of three hours or until it is manually stopped. After the recording is finished, it cleans up the resources and sends a response indicating success."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.post:14
msgid "The unique identifier for the virtual machine."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.post:19
msgid "JsonResponse"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.post:19
msgid "A JsonResponse indicating whether the recording started successfully or detailing any errors that occurred."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.post:23
#: ../../../apikeys/views.py:docstring of apikeys.views.create_video:17
msgid "Exception"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RecordVideoVMView.post:24
msgid "Any exception that occurs while starting or managing the recording."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RecreateFoldersView:1
msgid "This Django view handles POST requests to recreate a set of folders inside a QCOW2 file in a Virtual Machine."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RecreateFoldersView:3
#: ../../../apikeys/views.py:docstring of apikeys.views.RunPluginView:3
msgid "The view first authenticates the request based on the provided API key. If the user related to the API key is not active, it returns an error."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RecreateFoldersView:6
msgid "Upon successful authentication, the view retrieves a list of folders and a VM uuid from the request. It then creates a new QCOW2 file in the corresponding VM directory and formats it with NTFS filesystem, followed by creating the specified folders in the root directory of the filesystem. If the QCOW2 file already exists, it is first deleted."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RecreateFoldersView:10
msgid "If the QCOW2 file is created and formatted successfully, the view returns a success message. If an error occurs during the operation, it returns an error message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RecreateFoldersView:13
msgid "The view uses the `create_and_format_qcow2` function to perform the creation and formatting operations."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RemoveVMDateTimeView:1
msgid "View to remove the datetime line from a VM's configuration."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RemoveVMDateTimeView:3
msgid "The view has no authentication or permission restrictions. The post method is used to handle the removal of the datetime line from the configuration of a VM with a given UUID."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RemoveVMDateTimeView.post:1
msgid "Handle a POST request to remove the datetime line from a VM's configuration."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RemoveVMDateTimeView.post:3
msgid "This method first checks if the user is authenticated or if there is an API key error. If there's an API key error, it returns a JSON response with the error. The method then retrieves the UUID from the POST data. It locates the .vnc configuration file for the VM with the provided UUID, reads its content, and removes any line containing the '-rtc base=' string. If successful, the method returns a JSON response indicating the successful operation. If there's an error, it returns a JSON response with the error message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ResetVMView:1
msgid "This Django View handles POST requests to reset a VM. It authenticates the request and then uses the `system_reset` function to send a reset command to the VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ResetVMView.get_user_or_key_error:1
#: ../../../apikeys/views.py:docstring of apikeys.views.ScreenshotVMView.get_user_or_key_error:1
#: ../../../apikeys/views.py:docstring of apikeys.views.ShutdownVMView.get_user_or_key_error:1
msgid "Helper method to retrieve the authenticated user from the request, or return an error response if the request is not authenticated."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ResetVMView.get_user_or_key_error:4
#: ../../../apikeys/views.py:docstring of apikeys.views.ScreenshotVMView.get_user_or_key_error:4
#: ../../../apikeys/views.py:docstring of apikeys.views.ShutdownVMView.get_user_or_key_error:4
msgid "The request can be authenticated either through session-based authentication or by including an 'X-API-KEY' header in the request."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ResetVMView.get_user_or_key_error:8
#: ../../../apikeys/views.py:docstring of apikeys.views.ScreenshotVMView.get_user_or_key_error:8
#: ../../../apikeys/views.py:docstring of apikeys.views.ShutdownVMView.get_user_or_key_error:8
msgid "request: The Django request object."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ResetVMView.get_user_or_key_error:11
#: ../../../apikeys/views.py:docstring of apikeys.views.ScreenshotVMView.get_user_or_key_error:11
#: ../../../apikeys/views.py:docstring of apikeys.views.ShutdownVMView.get_user_or_key_error:11
msgid "If the request is authenticated, returns a tuple where the first element is the authenticated user and the second element is None."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ResetVMView.get_user_or_key_error:14
#: ../../../apikeys/views.py:docstring of apikeys.views.ScreenshotVMView.get_user_or_key_error:14
#: ../../../apikeys/views.py:docstring of apikeys.views.ShutdownVMView.get_user_or_key_error:14
msgid "If the request is not authenticated, returns a tuple where the first element is None and the second element is a JsonResponse with an error message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ResetVMView.post:1
msgid "This method handles the POST request to reset a VM. It checks for user authentication, verifies the existence of the VM, and then sends the reset command."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ResetVMView.post:5
msgid "request (django.http.HttpRequest): The request instance. uuid (str): The UUID of the VM to be reset."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ResetVMView.post:9
#: ../../../apikeys/views.py:docstring of apikeys.views.ShutdownVMView.post:9
msgid "django.http.JsonResponse: A JSON response with the result of the operation."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RollbackSnapshotView:1
msgid "API View that handles POST requests to rollback a snapshot of a specific VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RollbackSnapshotView:3
msgid "This view requires an API key for authentication. If the API key is valid and is associated with an active user, it calls the `rollback_snapshot` asynchronous function to rollback to the snapshot."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RollbackSnapshotView.post:1
msgid "Handles the POST request to rollback to a snapshot of a VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RollbackSnapshotView.post:6
msgid "uuid: The UUID of the VM to rollback the snapshot."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RunPluginView:1
msgid "This Django view handles GET requests to run a forensic plugin script on a specified image within a Virtual Machine."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RunPluginView:6
msgid "Upon successful authentication, the view retrieves the plugin directory and VM uuid from the request parameters. It validates the existence of the plugin script and the image, both identified using the provided parameters."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RunPluginView:9
msgid "If the validation is successful, it attempts to run the plugin script on the image and returns the script's stdout as the response. If the script fails to run, the error details are returned in the response."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RunPluginView:12
msgid "If the validation fails because of the non-existence of the plugin script or the image, an appropriate error message is returned."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RunPluginView:14
msgid "This view does not require any special permissions or authentication classes, as it is intended to be used internally by the system."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RunPluginView.get:1
msgid "Handles GET requests to execute a specific forensic plugin on a VM image."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RunPluginView.get:6
msgid "The method retrieves the plugin directory and image UUID from the GET parameters. It validates these parameters by checking the existence of the plugin script and the image path. If any of these does not exist, an error response is returned."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RunPluginView.get:9
msgid "The method looks for the latest '.qcow2-sda' file within the image path and sets it as the target for the plugin."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RunPluginView.get:11
msgid "Upon successful validation, the method attempts to run the plugin script on the image using a bash subprocess. The output from the subprocess is returned in the response."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RunPluginView.get:14
msgid "If the plugin script execution fails, the error details are returned in the response."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RunPluginView.get:19
msgid "Returns: JsonResponse: A JSON object containing either the output of the plugin execution or an error message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RunScriptView:1
msgid "API endpoint for running a script."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RunScriptView:3
msgid "This view accepts a POST request and expects an API key to be provided in the request headers. The request should contain a 'script' parameter in the data payload, which contains the script to be executed. The script is executed using the subprocess module, and the output and error code are returned in the response."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RunScriptView:7
msgid "Note: This view does not perform any authentication or permission checks beyond validating the API key."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RunScriptView.post:1
msgid "Handles the POST request to execute a script."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.RunScriptView.post:7
msgid "Response: A Django Response object containing the script output and error code."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ScreenshotVMView:1
msgid "A View class to handle the capture of screenshots from a Virtual Machine (VM)."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ScreenshotVMView:3
msgid "This View supports an asynchronous POST request, which initiates the capture of a screenshot from the VM. The VM is identified by its UUID, which is passed in the URL."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ScreenshotVMView:6
msgid "Authentication is required to access this View. It supports both session-based authentication and API key authentication."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ScreenshotVMView.post:1
msgid "Handles a POST request to capture a screenshot from a VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ScreenshotVMView.post:3
msgid "The VM is identified by its UUID, which is passed in the URL."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ScreenshotVMView.post:5
msgid "The request must be authenticated. This can be done either through session-based authentication or by including an 'X-API-KEY' header in the request."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ScreenshotVMView.post:9
msgid "request: The Django request object. uuid: The UUID of the VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ScreenshotVMView.post:13
msgid "A JsonResponse containing the status of the screenshot operation. If the operation is successful, the response will include a 'screenshot_taken' key with a value of True, and a 'message' key with the screenshot number."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ScreenshotVMView.post:17
msgid "If an error occurs, the JsonResponse will contain an 'error' key with a description of the error."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ShutdownVMView:1
msgid "This Django View handles POST requests to shutdown a VM. It authenticates the request and then uses the `system_shutdown` function to send a shutdown command to the VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ShutdownVMView.post:1
msgid "This method handles the POST request to shut down a VM. It checks for user authentication, verifies the existence of the VM, and then sends the shutdown command."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.ShutdownVMView.post:5
msgid "request (django.http.HttpRequest): The request instance. uuid (str): The UUID of the VM to be shutdown."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.SnapshotListView:1
msgid "API View that handles GET requests to retrieve the list of snapshots of a specific VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.SnapshotListView:3
msgid "This view requires an API key for authentication. If the API key is valid and is associated with an active user, it calls the `get_snapshots` asynchronous function to retrieve the list of snapshots."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.SnapshotListView:8
msgid "The response includes a list of snapshots or an error message in a JSON format: {"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.SnapshotListView:10
msgid "\"snapshots\": [<list of snapshots>]"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.SnapshotListView.get:1
msgid "Handles the GET request to retrieve the list of snapshots of a VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.SnapshotListView.get:4
msgid "request: The HTTP request from the client. Expected to contain the API key in the headers. uuid: The UUID of the VM to get the snapshots."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.SnapshotListView.get:8
msgid "JsonResponse: A JsonResponse that either contains the list of snapshots or an error message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StartTapInterfaceView:1
msgid "View to start the tap interface of a VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StartTapInterfaceView:3
msgid "The view authenticates the user with SessionAuthentication. The post method is used to handle the start request of the tap interface of a VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StartTapInterfaceView.post:1
msgid "Handle a POST request to start the tap interface of a VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StartTapInterfaceView.post:3
msgid "This method first checks if there is an API key error. If there's an API key error, it returns a JSON response with the error. The method then gets the UUID from the POST data and tries to start the tap interface. It executes shell commands to get the tap interface and starts it. If the tap interface starts successfully, the method returns a JSON response with a positive message. If there's an error while starting the tap interface, the method returns a JSON response with the error."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StartTapInterfaceView.post:18
msgid "A JsonResponse with a message about the status of the tap interface start action."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StartVMView:1
msgid "API endpoint that allows VMs to be started via POST requests."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StartVMView:3
msgid "This view accepts a POST request with a UUID and attempts to start the corresponding VM. If successful, it returns a 200 OK response with a JSON body indicating the VM has been started and provides the VNC and WebSocket ports. If the VM path or VNC script cannot be found, it returns a 404 Not Found error. An API key or session-based authentication is required."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StartVMView.post:1
msgid "Starts the VM specified by the UUID."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StartVMView.post:4
msgid "request: The POST request received by the server. uuid: The UUID of the VM to be started."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StartVMView.post:8
#: ../../../apikeys/views.py:docstring of apikeys.views.StopVMView.post:8
msgid "Response: A Django Response object."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StopTapInterfaceView:1
msgid "View to stop the tap interface of a VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StopTapInterfaceView:3
msgid "The view authenticates the user with SessionAuthentication. The post method is used to handle the stop request of the tap interface of a VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StopTapInterfaceView.post:1
msgid "Handle a POST request to stop the tap interface of a VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StopTapInterfaceView.post:3
msgid "This method first checks if there is an API key error. If there's an API key error, it returns a JSON response with the error. The method then gets the UUID from the POST data and tries to stop the tap interface. It executes shell commands to get the tap interface and stops it. If the tap interface stops successfully, the method returns a JSON response with a positive message. If there's an error while stopping the tap interface, the method returns a JSON response with the error."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StopTapInterfaceView.post:18
msgid "A JsonResponse with a message about the status of the tap interface stop action."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StopVMView:1
msgid "API endpoint that allows VMs to be stopped via POST requests."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StopVMView:3
msgid "This view accepts a POST request with a UUID and attempts to stop the corresponding screen session of the VM. If successful, it returns a 200 OK response with a JSON body indicating the VM has been stopped. If the screen session cannot be found, it returns a 404 Not Found error. An API key is required for authentication."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StopVMView.post:1
msgid "Stops the VM specified by the UUID."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StopVMView.post:4
msgid "request: The POST request received by the server. uuid: The UUID of the VM to be stopped."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView:1
msgid "View to handle the stoppage of video recording."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView:3
msgid "The view uses session authentication and has no permission restrictions. The post method is used to handle the stoppage of the video recording for a VM with a given UUID."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView.post:1
msgid "Handle a POST request to stop video recording for a VM with a given UUID."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView.post:3
msgid "This method first checks if the user is authenticated or if there is an API key error. If there's an API key error, it returns a JSON response with the error. If the UUID is present in the recordings, it stops the recording by setting the corresponding value to False. If the UUID is not present, it returns a HTTP 400 error. Finally, it returns a JSON response confirming the stoppage of the recording."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.StopVideoRecordingVMView.post:14
msgid "The UUID of the VM for which the recording should be stopped."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.UploadISOView:1
msgid "This is a Django view that provides an endpoint for uploading an ISO file to a specified directory."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.UploadISOView:3
msgid "The UploadISOView class handles HTTP POST requests to receive an ISO file and save it to the directory."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.UploadISOView.post:1
msgid "This method handles the POST request to upload an ISO file."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.UploadISOView.post:3
msgid "It first validates the API key from the request. If the API key is valid and belongs to an active user, it checks if an ISO file is provided in the request. If it is, it saves the ISO file to a specified directory and returns a confirmation message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.change_qcow2:1
msgid "This function creates new folders in a qcow2 disk image. It uses guestfish commands to interact with the disk image."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.change_qcow2:3
msgid "Parameters: qcow2_file (str): Path to the qcow2 file that should be changed. folders (list): List of folder names to be created in the qcow2 image."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.change_qcow2:7
msgid "Returns: None"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.change_qcow2:10
msgid "Raises: subprocess.CalledProcessError: If a guestfish command fails."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.create_and_format_qcow2:1
msgid "Creates and formats a new QCOW2 file with a capacity of 20GB, and initializes it with a new NTFS partition."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.create_and_format_qcow2:3
msgid "This function first creates a new QCOW2 file using the `qemu-img` command. Then, it initializes a new NTFS partition on the QCOW2 file using the `guestfish` command-line tool."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.create_and_format_qcow2:6
msgid "After the partition is created, the function creates a series of folders in the root directory of the partition. Finally, it writes a readme file in the root directory of the partition."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.create_and_format_qcow2:10
msgid "qcow2_file (str): The path where the new QCOW2 file will be created. folders (list): A list of folder names that will be created in the root directory of the NTFS partition."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.create_and_format_qcow2:14
msgid "subprocess.CalledProcessError: If the `qemu-img` command or the `guestfish` command fails."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.create_snapshot:1
msgid "Asynchronously creates a snapshot of a specific VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.create_snapshot:3
msgid "This function uses QEMU's QMP (QEMU Machine Protocol) to execute commands on the VM. It specifically runs the `savevm` command to create the snapshot."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.create_snapshot:7
#: ../../../apikeys/views.py:docstring of apikeys.views.get_snapshots:7
msgid "uuid (str): The unique identifier for the VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.create_snapshot:10
msgid "str: The name of the snapshot if successful, or an error message if an exception occurred."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.create_video:1
msgid "Asynchronously create a video from screenshots taken in a virtual machine using QEMU Machine Protocol (QMP)."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.create_video:3
msgid "The function connects to QMP, executes a screendump command to take a screenshot and saves it to a specified path. It then reads the screenshot into an image and writes the image as a frame to a video file. If the video writer is not yet set up, it initializes it with the size of the first frame. Once the frame has been written to the video, it removes the screenshot file."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.create_video:13
msgid "output_video_path"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.create_video:13
msgid "The path where the output video will be saved."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.create_video:18
msgid "Any exception that occurs while creating the video or connecting/disconnecting from QMP."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.delete_snapshot:1
msgid "Asynchronously delete a snapshot of a specific VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.delete_snapshot:3
msgid "This function uses QEMU's QMP (QEMU Machine Protocol) to execute commands on the VM. It specifically runs the `delvm` command to delete the snapshot."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.delete_snapshot:7
msgid "uuid (str): The unique identifier for the VM. snapshot_name (str): The name of the snapshot to delete."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.delete_snapshot:11
msgid "str: A message indicating whether the snapshot was successfully deleted or not."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.eject_cdrom:1
msgid "Asynchronously ejects the CD-ROM from a specified virtual machine."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.eject_cdrom:3
msgid "This function establishes a connection to the QEMU Machine Protocol (QMP) and sends a command to open the tray of the CD-ROM drive, effectively ejecting the CD-ROM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.eject_cdrom:6
msgid "Parameters: uuid (str): The unique identifier of the virtual machine."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.eject_cdrom:9
#: ../../../apikeys/views.py:docstring of apikeys.views.insert_cdrom:10
#: ../../../apikeys/views.py:docstring of apikeys.views.insert_network_card:10
msgid "Returns: str: A confirmation message."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.find_available_port:1
msgid "This function finds two available, sequential TCP ports to use, starting from the given `start_port`."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.find_available_port:4
msgid "start_port (int): The port number from which to start checking for availability."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.find_available_port:7
msgid "tuple: A pair of two available, sequential TCP port numbers."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.find_available_port:10
msgid "OSError: If an error occurs that is not related to a port being in use (e.g., permission denied, etc.)"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.generate_random_mac_address:1
msgid "Generates a random MAC address."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.generate_random_mac_address:3
msgid "This function creates a MAC address with the locally administered and unicast bits set, and with the rest of the bits randomized."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.generate_random_mac_address:6
msgid "Returns: str: The generated MAC address."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.get_available_memory:1
msgid "Get the current available system memory."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.get_available_memory:3
msgid "This function uses the psutil library to fetch system memory information. It returns the amount of available memory in Megabytes."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.get_available_memory:8
msgid "float"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.get_available_memory:9
msgid "The amount of available system memory in Megabytes."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.get_plugin_info:1
msgid "Runs the 'info' command of the plugin script and retrieves the specified information."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.get_plugin_info:3
msgid "Parameters: plugin_dir (str): The directory where the plugin script is located. info (str): The type of information to retrieve (e.g. 'plugin_name', 'plugin_description')."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.get_plugin_info:7
msgid "Returns: str: The requested information, or an empty string if the information could not be retrieved."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.get_snapshots:1
msgid "Asynchronously retrieves the list of snapshots of a specific VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.get_snapshots:3
msgid "This function uses QEMU's QMP (QEMU Machine Protocol) to execute commands on the VM. It specifically runs the `info snapshots` command to retrieve the list of snapshots."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.get_snapshots:11
msgid "list: A list of dictionaries containing snapshot information. Each dictionary includes"
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.get_snapshots:11
msgid "snapshot id, tag, VM size, date, and VM clock. If an exception occurred, an empty list is returned."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.insert_cdrom:1
msgid "Asynchronously inserts a CD-ROM into a specified virtual machine."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.insert_cdrom:3
msgid "This function establishes a connection to the QEMU Machine Protocol (QMP) and sends a command to change the medium of the CD-ROM drive to the specified ISO file."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.insert_cdrom:6
msgid "Parameters: uuid (str): The unique identifier of the virtual machine. filename (str): The name of the ISO file to insert into the CD-ROM drive."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.insert_network_card:1
msgid "Asynchronously inserts a network card into a specified virtual machine."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.insert_network_card:3
msgid "This function first generates a random MAC address if none is provided. It then establishes a connection to the QEMU Machine Protocol (QMP) and sends commands to add a new network device to the machine."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.insert_network_card:6
msgid "Parameters: uuid (str): The unique identifier of the virtual machine. mac_address (str, optional): The MAC address to assign to the network card."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.memory_snapshot:1
msgid "This asynchronous function captures a snapshot of a VM's memory."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.memory_snapshot:3
msgid "It establishes a connection with the QEMU Machine Protocol (QMP) running on the VM, then uses the QMP command 'dump-guest-memory' to capture the memory snapshot."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.memory_snapshot:6
msgid "The function saves the memory snapshot to the VM's directory, with a unique filename based on the current number of existing snapshots."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.memory_snapshot:9
msgid "Parameters: uuid (str): The UUID of the VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.memory_snapshot:12
msgid "Returns: str: The path to the newly created memory snapshot file."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.memory_snapshot:15
msgid "Raises: Exception: If there's an error executing the 'dump-guest-memory' command or disconnecting from QMP."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.rollback_snapshot:1
msgid "Asynchronously rollback to a snapshot of a specific VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.rollback_snapshot:3
msgid "This function uses QEMU's QMP (QEMU Machine Protocol) to execute commands on the VM. It specifically runs the `loadvm` command to rollback to the snapshot."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.rollback_snapshot:7
msgid "uuid (str): The unique identifier for the VM. snapshot_name (str): The name of the snapshot to rollback to."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.rollback_snapshot:11
msgid "str: A message indicating whether the snapshot was successfully rolled back or not."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.screendump:1
msgid "Capture a screenshot of a Virtual Machine (VM) and save it as a PNG file."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.screendump:3
msgid "This function uses the QEMU Machine Protocol (QMP) to communicate with the VM and issue the 'screendump' command, which captures a screenshot of the current state of the VM's display. The screenshot is saved to a directory named 'screenshots' within the VM's directory, and the file is named 'sc' followed by a five-digit number, with leading zeroes as necessary."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.screendump:9
msgid "uuid: The UUID of the VM to capture a screenshot from."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.screendump:12
msgid "The number of the screenshot that was taken, as an integer."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.screendump:15
msgid "Prints an exception error if the QMP connection or command execution fails."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.system_reset:1
msgid "This function sends a reset command to a VM specified by its UUID. It uses QEMU's QMP (QEMU Machine Protocol) to interact with the VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.system_reset:5
msgid "uuid (str): The UUID of the VM to be reset."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.system_reset:8
#: ../../../apikeys/views.py:docstring of apikeys.views.system_shutdown:8
msgid "Exception: If there's an error while trying to interact with the VM, an exception will be raised."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.system_shutdown:1
msgid "This function sends a shutdown command to a VM specified by its UUID. It uses QEMU's QMP (QEMU Machine Protocol) to interact with the VM."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.system_shutdown:5
msgid "uuid (str): The UUID of the VM to be shutdown."
msgstr ""

#: ../../../apikeys/views.py:docstring of apikeys.views.validate_date:1
msgid "Function to validate the date string against the format 'YYYY-MM-DDTHH:MM:SS'"
msgstr ""

#: ../../source/apikeys.rst:72
msgid "Module contents"
msgstr ""
